{"version":3,"file":"shadow.markup.css.impl.gen.js","sources":["shadow/markup/css/impl/gen.cljc"],"mappings":"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","names":["cljs.core/seq","attrs","value","p1__30649#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","shadow.markup.css.impl.gen/css-value-to-str","key","G__30662","shadow.markup.css.impl.gen/Rule","selector","js/Error","shadow.markup.css.impl.gen/root*","rules","shadow.markup.css.impl.gen/nested-rule","cljs.core/every?","shadow.markup.css.impl.gen/rule?","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","v","self","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/keys","shadow.markup.css.impl.gen/rule","query","el-name","shadow.markup.css.impl.gen/group*","sub-rules","cljs.core/vector?","shadow.markup.css.impl.gen/el-selector","cljs.core/first","parent","cljs.core/not","nested","shadow.markup.css.impl.gen/gen-rule","root","shadow.markup.css.impl.gen/rules-from-map","el","x","cljs.core/Keyword","k","shadow.markup.css.impl.gen/no-nested-rules!","shadow.markup.css.impl.gen/merge-selector","tag","class","shadow.markup.css.impl.gen/gen-rule-attrs","ns","shadow.markup.css.impl.gen/css-rules","shadow.markup.css.impl.gen/number-as-str-props","p1__30658#","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","shadow.markup.css.impl.gen/gen-css-rules","clojure.string.join.cljs$core$IFn$_invoke$arity$2","clojure.string/replace","or__5126__auto__","cljs.core/meta","shadow.markup.css.impl.gen/map->root","G__30704","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","shadow.markup.css.impl.gen/IElement","m","cljs.core.get.cljs$core$IFn$_invoke$arity$2","shadow.markup.css.impl.gen/el-root","env","and__5114__auto__","type","clojure.string/starts-with?","shadow.markup.css.impl.gen/gen-el-selector","cljs.core/name","var_args","args__6412__auto__","len__6405__auto__","i__6406__auto__","argseq__6413__auto__","cljs.core/IndexedSeq","shadow.markup.css.impl.gen/root","seq30733","G__30734","cljs.core/next","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","cljs.core/map?","cljs.core/reduce-kv","cljs.core/keyword?","shadow.markup.css.impl.gen/el-type","shadow.markup.css.impl.gen/media","seq30686","G__30687","G__30688","shadow.markup.css.impl.gen/attrs-from-map","x__5859__auto__","m__5860__auto__","shadow/markup.css.impl.gen.el-selector","goog/typeOf","cljs.core/missing-protocol","shadow/markup.css.impl.gen.el-type","shadow/markup.css.impl.gen.el-root","cljs.core/contains?","this","vec__30705","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","suffix","p1__30659#","clojure.string/includes?","nested-rules","p1__30660#","cljs.core/constantly","s","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/complement","this__5797__auto__","writer__5798__auto__","opt__5799__auto__","cljs.core/-write","shadow.markup.css.impl.gen/->Rule","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","shadow.markup.css.impl.gen/css-rules-for-el","shadow/markup.css.impl.gen.gen-css-rules","shadow.markup.css.impl.gen/IStyleGen"],"sourcesContent":["(ns shadow.markup.css.impl.gen\n  (:require [clojure.string :as str]))\n\n(defprotocol IElement\n  (el-selector [x])\n  (el-type [x])\n  (el-root [x env]))\n\n(defprotocol IStyleGen\n  (gen-css-rules [x tag class] \"generate a sequence of strings (css-rules)\"))\n\n(declare map->root)\n\n(defn gen-el-selector\n  \"called from macro, assumes ns as clojure.lang.Namespace and el-name as a symbol\"\n  [ns el-name]\n  (let [ns\n        (or (-> ns meta :shadow.markup.css/alias)\n            (str ns))\n\n        el-name\n        (or (-> el-name meta :shadow.markup.css/alias)\n            (name el-name))]\n    (-> (str ns \"--\" el-name)\n        ;; FIXME: some more munging might be required?\n        ;; css selectors probably don't allow some chars that are otherwise ok in an ns/name ($!? come to mind)\n        (str/replace #\"\\.\" (constantly \"-\")))))\n\n(defn css-rules [root tag class]\n  (let [root\n        (if (map? root)\n          (map->root root)\n          root)]\n\n    (gen-css-rules root tag class)\n    ))\n\n(defn css-rules-for-el\n  [env el]\n  (let [root\n        (el-root el env)\n\n        tag\n        (el-type el)\n\n        class\n        (el-selector el)]\n\n    (css-rules root tag class)))\n\n(def number-as-str-props\n  #{:flex\n    :font-weight\n    :z-index\n    :opacity})\n\n(defn css-value-to-str [key value]\n  (cond\n    (string? value)\n    value\n\n    (number? value)\n    (cond\n      (zero? value)\n      \"0\"\n\n      (contains? number-as-str-props key)\n      (str value)\n\n      :else\n      (str value \"px\"))\n\n    (vector? value)\n    (->> value\n         (map #(css-value-to-str key %))\n         (str/join \" \"))\n    ))\n\n(defn gen-rule-attrs [attrs]\n  (reduce-kv\n    (fn [s key value]\n      (str s \"\\n  \" (name key) \": \" (css-value-to-str key value) \";\"))\n    \"\"\n    attrs))\n\n(defn gen-rule [selector attrs]\n  ;; safe-guard against invalid rules\n  {:pre [(seq attrs)\n         (string? selector)\n         (every? keyword? (keys attrs))]}\n\n  (str selector \" {\"\n       (gen-rule-attrs attrs)\n       \"\\n}\"))\n\n(defn merge-selector [selector tag class]\n  (cond\n    (str/includes? selector \"%\")\n    (-> selector\n        (str/replace #\"%\" tag)\n        (str/replace #\"&\" (str \".\" class)))\n\n    :else\n    (str/replace selector #\"&\" (str tag \".\" class))))\n\n(deftype Rule [type selector attrs nested-rules]\n  IStyleGen\n  (gen-css-rules [this tag class]\n    (case type\n      :root\n      (let [self\n            (if (seq attrs)\n              [(gen-rule (str tag \".\" class) attrs)]\n              [])]\n\n        (->> nested-rules\n             (mapcat #(gen-css-rules % tag class))\n             (into self)))\n\n      :rule\n      (let [self\n            (if (seq attrs)\n              (let [selector (merge-selector selector tag class)]\n                [(gen-rule selector attrs)])\n              [])]\n\n        (->> nested-rules\n             (mapcat #(gen-css-rules % tag class))\n             (into self)))\n\n      :group\n      (let [nested\n            (mapcat #(gen-css-rules % tag class) nested-rules)]\n\n        (if (and (not (seq attrs))\n                 (not (seq nested)))\n          ;; group has not attrs or nested rules, don't generate a rule\n          []\n          ;; generate one rule that combines all other rules\n          [(str selector \" {\\n\"\n                (when (seq attrs)\n                  (gen-rule (str tag \".\" class) attrs))\n                (when (seq nested)\n                  (str \"\\n\" (str/join \"\\n\" nested)))\n                \"\\n}\")])))))\n\n(defn rule? [x]\n  (instance? Rule x))\n\n(defn group* [query attrs rules]\n  {:pre [(string? query)\n         (map? attrs)\n         (every? rule? rules)]}\n  (Rule. :group query attrs rules))\n\n(defn media [query attrs & rules]\n  (group* (str \"@media\" query) attrs rules))\n\n(defn rule [selector attrs]\n  {:pre [(string? selector)\n         (map? attrs)]}\n  (when-not (str/includes? selector \"&\")\n    (throw (ex-info \"rules must contain & to place prefix (&:hover instead of :hover)\" {:selector selector :attrs attrs})))\n\n  (Rule. :rule selector attrs []))\n\n(defn nested-rule [parent attrs]\n  (let [selector\n        (cond\n          (satisfies? IElement parent)\n          (str \".\" (el-selector parent) \" &\")\n\n          (and (vector? parent)\n               (= 1 (count parent))\n               (and (satisfies? IElement (first parent))))\n          (str \".\" (el-selector (first parent)) \" &\")\n\n          (and (vector? parent)\n               (= 2 (count parent)))\n\n          (let [[el suffix] parent]\n            (when-not (satisfies? IElement el)\n              (throw (ex-info \"need to be nested in IElement\" {:parent parent :attrs attrs})))\n            (str \".\" (el-selector el) suffix \" &\")))]\n    (Rule. :rule selector attrs [])))\n\n(defn root* [attrs rules]\n  {:pre [(map? attrs)\n         (every? rule? rules)]}\n  (Rule. :root nil attrs rules))\n\n(defn root [attrs & rules]\n  (root* attrs rules))\n\n(defn attrs-from-map [m]\n  (reduce-kv\n    (fn [m k v]\n      (if-not (keyword? k)\n        m\n        (assoc m k v)))\n    {}\n    m))\n\n(defn- no-nested-rules!\n  [selector rules]\n  (when (seq rules)\n    (throw (ex-info \"selector cannot have nested rules\" {:selector selector :rules (map :selector rules)}))))\n\n(defn rules-from-map [m]\n  (->> m\n       (keys)\n       (filter (complement keyword?))\n       (map\n         (fn [selector]\n           (let [v (get m selector)\n\n                 sub-rules\n                 (rules-from-map v)\n\n                 attrs\n                 (attrs-from-map v)]\n             (cond\n               (and (string? selector)\n                    (str/starts-with? selector \"@\"))\n               (group* selector attrs sub-rules)\n\n               ;; FIXME: we could allow nesting but styles get messy at that point\n               (string? selector)\n               (do (no-nested-rules! selector sub-rules)\n                   (rule selector attrs))\n\n               (satisfies? IElement selector)\n               (do (no-nested-rules! selector sub-rules)\n                   (nested-rule selector attrs))\n\n               (vector? selector)\n               (do (no-nested-rules! selector sub-rules)\n                   (nested-rule selector attrs))\n\n               :else\n               (throw (ex-info \"invalid key in map\" {:key selector :value v}))\n               ))))\n       (into [])))\n\n(defn map->root [m]\n  (root* (attrs-from-map m) (rules-from-map m)))\n\n"]}